{"version":3,"sources":["../src/index.js"],"names":["NAMESPACE","START","STOP","START_ALL","STOP_ALL","createReduxSagaLoading","opts","namespace","initialState","models","reduxReducers","state","action","modelNames","type","startModels","name","Object","assign","stopModels","starts","keys","reduce","obj","key","stops","startLoading","stopLoading","startAllLoading","stopAllLoading"],"mappings":"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","file":"index.js","sourcesContent":["import {\r\n    put\r\n} from \"redux-saga/effects\"\r\nconst NAMESPACE = 'loading';\r\nconst START = '@@REDUX_SAGA_LOADING/START'\r\nconst STOP = '@@REDUX_SAGA_LOADING/STOP'\r\nconst START_ALL = '@@REDUX_SAGA_LOADING/START_ALL'\r\nconst STOP_ALL = '@@REDUX_SAGA_LOADING/STOP_ALL'\r\n\r\nfunction createReduxSagaLoading(opts = {}) {\r\n    const namespace = opts.namespace || NAMESPACE;\r\n    const initialState = {\r\n        models: {}\r\n    };\r\n    const reduxReducers = {\r\n        [namespace](state = initialState, action) {\r\n            const {\r\n                modelNames\r\n            } = action\r\n            switch (action.type) {\r\n                case START:\r\n                    let startModels = {}\r\n                    for (const name of modelNames) {\r\n                        startModels[name] = true\r\n                    }\r\n                    return {\r\n                        models: Object.assign({}, {\r\n                            ...state.models\r\n                        }, startModels)\r\n                    };\r\n                case STOP:\r\n                    let stopModels = {}\r\n                    for (const name of modelNames) {\r\n                        stopModels[name] = false\r\n                    }\r\n                    return {\r\n                        models: Object.assign({}, {\r\n                            ...state.models\r\n                        }, stopModels)\r\n                    };\r\n                case START_ALL:\r\n                    const starts = Object.keys(state.models).reduce((obj, key) => {\r\n                        obj[key] = true;\r\n                        return obj\r\n                    }, {})\r\n                    return {\r\n                        models: starts\r\n                    };\r\n                case STOP_ALL:\r\n                    const stops = Object.keys(state.models).reduce((obj, key) => {\r\n                        obj[key] = false;\r\n                        return obj\r\n                    }, {})\r\n                    return {\r\n                        models: stops\r\n                    };\r\n                default:\r\n                    return state;\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        reduxReducers\r\n    };\r\n}\r\n\r\nconst startLoading = (...modelNames) => put({\r\n    type: START,\r\n    modelNames\r\n})\r\nconst stopLoading = (...modelNames) => put({\r\n    type: STOP,\r\n    modelNames\r\n})\r\nconst startAllLoading = () => put({\r\n    type: START_ALL\r\n})\r\nconst stopAllLoading = () => put({\r\n    type: STOP_ALL\r\n})\r\n\r\nexport {\r\n    createReduxSagaLoading,\r\n    startLoading,\r\n    stopLoading,\r\n    startAllLoading,\r\n    stopAllLoading\r\n}"]}